//add libraries - partially on github as well
#include "DFRobot_EC.h"
#include <EEPROM.h>
#include <SD.h>
#include <RTClib.h>
#include <Wire.h>
#include "GravityTDS.h"
#include <OneWire.h>
#include <DallasTemperature.h>
#include <Wire.h> 
#include <LiquidCrystal_I2C.h>


#define EC_PIN A0 //ec sensor
#define TdsSensorPin A2 //tds sensor
float tdsValue = 0; //tds sensor
float voltage,ecValue; //turbidity sensor
const int SENSOR_PIN = 9; // Arduino pin connected to DS18B20 sensor's DQ pin - temp sensor
const int chipSelect = 10; // sd-card module
OneWire oneWire(SENSOR_PIN);         // setup a oneWire instance for temp sensor
DallasTemperature tempSensor(&oneWire); // pass oneWire to DallasTemperature library
DS3231 rtc; //rtc
GravityTDS gravityTds; // tds sensor
LiquidCrystal_I2C lcd(0x27, 16, 2); //lcd display
DFRobot_EC ec; //ec sensor
File myFile; // sd card module
float temperature;    // temperature sensor
char t[32]; // time for logging
char d[20]; // time for ldc display
int sensorPin = 2; //flow sensor
volatile long pulse; //flow sensor
unsigned long lastTime; //flow sensor
float volume; //flow sensor

void setup()
{
  Serial.begin(9600);  //check in serial monitor if you want to see measurement results
  pinMode(sensorPin, INPUT); //flow sensor
  attachInterrupt(digitalPinToInterrupt(sensorPin), increase, RISING); //flow sensor
 	lcd.begin(); //intialize lcd display
  ec.begin(); //initialzie ec sensor
  Wire.begin(); //intialize temp  
  tempSensor.begin();    // initialize the temp sensor
  rtc.begin(); //intialize real time clock
  gravityTds.setPin(TdsSensorPin); //tds sensor
  gravityTds.setAref(5.0);  //reference voltage on ADC, default 5.0V on Arduino UNO for tds 
  gravityTds.setAdcRange(1024);  //1024 for 10bit ADC;4096 for 12bit ADC for tds
  gravityTds.begin();  //initialization of tds
    if (gravityTds.getKvalue() < 0.01) {
    gravityTds.setKValue(1.0);
    }
  //rtc.adjust(DateTime(F(__DATE__),F(__TIME__))); //IMPORTANT: You have to syncronize the rtc on the arduino once with your computer time -> then this object is stored in the ardunio, resulting in a jump back to the initilized time once the ardunio is starting again. workaround: upload this skript first and comment the line out and upload once again!
  Serial.print("Initializing SD card..."); //check if sd card is there
  if (!SD.begin()) {
    Serial.println("initialization failed!");
    return;
  }
  Serial.println("initialization done.");
}


void loop()
{
  int sensorValue = analogRead(A1); //turbidity sensor
  float voltage_s55 = sensorValue; //turbidity sensor
  tempSensor.requestTemperatures();             // send the command to get temperatures
  temperature = tempSensor.getTempCByIndex(0);  // read temperature in Celsius
  DateTime now = rtc.now(); //rtc
  sprintf(t, "%02d-%02d-%02d %02d:%02d:%02d", now.year(), now.month(), now.day(), now.hour(), now.minute(), now.second()); //format time for logging
  sprintf(d, "%02d-%02d %02d:%02d:%02d", now.month(), now.day(), now.hour(), now.minute(), now.second()); // format time for lcd display
  gravityTds.setTemperature(temperature);  // set the temperature and execute temperature compensation
  gravityTds.update();  //sample and calculate
  tdsValue = gravityTds.getTdsValue();  // then get the value
  volume = 2.663 * pulse / 1000 * 30; //flow sensor calculate discharge in l/m

    static unsigned long timepoint = millis();
    if(millis()-timepoint>2000U)  //set logging interval: 2s
    {
      timepoint = millis();
      pulse = 0; //flow sensor
      voltage = analogRead(EC_PIN)/1024.0*5000;   // read the voltage
      ecValue =  ec.readEC(voltage,temperature);  // convert voltage to EC with temperature compensation
      Serial.print("\ntime ");
      Serial.print(t);
      Serial.print("temperature:");
      Serial.print(temperature,2);
      Serial.print("Â°C  EC:");
      Serial.print(ecValue,3);
      Serial.print("ms/cm  TDS:");
      Serial.print(tdsValue,1);
      Serial.print("ppm  Turbidity:");
      Serial.print(voltage_s55,3);
      Serial.print("unit");
      Serial.print(volume);
      Serial.print("L/m");
      lcd.backlight();
	    lcd.clear();
	    lcd.setCursor(0,0);
	    lcd.print(d);
      lcd.setCursor(0,1);
	    lcd.print("turb:");
      lcd.print(voltage_s55,0);
      lcd.print(" tds:");
      lcd.print(tdsValue,0);
    if(volume > 0){     //only logging if there if flow
      myFile = SD.open("daten.txt", FILE_WRITE);  //write on sd card
      if (myFile) {
      myFile.print(t);
      myFile.print(";");
      myFile.print(temperature,2);
      myFile.print(";");
      myFile.print(ecValue,3);
      myFile.print(";");
      myFile.print(tdsValue,1);
      myFile.print(";");
      myFile.print(voltage_s55,3);
      myFile.print(";");
      myFile.println(volume,3);
      myFile.close(); //close the file
      }
      //if the file didn't open, print an errror:
      else {
      Serial.println("error opening daten.txt");
      }}}}

void increase() {
  pulse++; //flow sensor
}
